#접속 방법 및 경로
$ cd ../../mysql/bin && ./mysql -u root -c DB이름
USE DB이름

행 - 레코드 - 세로(개인정보, 고객정보 등)
열 - 칼람 - 가로(주소 열, 이름 열 등)

<!-- 열함수, 집계함수 / 그룹화 --> 67p - 69p
COUNT(*) 전체 열의 갯수 반환 
COUNT(DISTINCT 열명) DISTINCT는 중복 삭제함 

MIN() 지정 열 최소값 반환  
MAX() 지정 열 최대값 반환
AVG() 지정 열 평균값 반환
SUM() 지정 열 합계값 반환 

<!--그룹화 --> 71p - 72p
그룹화에는 GROUP BY, HAVING 문이 있음 
GROUP BY - 그룹의 키 
HAVING - 그룹의 선택 조건

<!- DISTINCT --> 71p - 72p
특정열의 값이 중복되어있는 첫 행의 값을 가져옴

*중요! -> 능숙하게 다루게 되면 엄청 편해짐 !
<!--표(테이블) 결합 -->
테이플이 2개 이상 있었을 때 결합하여 필요한 정보를 뽑아내는 것이 가능.

- 내부결합
- 외부결합
  *좌외부결합, 우외부결합
- CROSS JOIN
- UNION

1. 내부결합 
결합 연산 중 가장 많이 이용되는 조합이다. 내부 결합에서는 사용할 테이블 안에 모두 존재하는 필드가 필요

#1-1 내부결합의 구버전 시타 방식..?
현재는 많이 안씀, 과거에는 많이썻기에 좀 낡은 데이터 처리할 때 필요할 수 있음
^JOIN 형식
FROM 표 A JOIN 표 ON A.fk = B.fk
WHERE 조건선택

^SQL92 형식
FROM 표 A, 표 BETWEEN
WHERE A.fk = B.fk
AND 조건선택

#2 외부결합
어느 한 쪽에만 존재하는 데이터행을 어떻게 다룰지를 변경할 수 있는 결합 방법이다.
특정 테이블에만 데이터를 새로 추가했을 때, 
다른 테이블에는 해당 데이터가 존재하지 않으므로 내부결합 결과에서는 해당 데이터가 제외된다.


LEFT JOIN이 무엇이었는지 되짚어보는 것부터 시작해보죠.
혹시 SQL의 조인 중에서 INNER JOIN을 기억하시나요? INNER JOIN은 조인하는 두 테이블에 공통으로 존재하는 값만 반환합니다.
반면에 LEFT JOIN의 경우, 왼쪽 테이블에서는 모든 값을 오른쪽 테이블에서는 왼쪽 테이블과 일치되는 값만 반환해줍니다.
그렇다면 어떠한 값이 왼쪽 테이블에는 존재하지만 오른쪽 테이블에는 존재하지 않는다면 두 테이블을 LEFT JOIN 한 결과는 어떠할까요?
LEFT JOIN을 하는 이상 왼쪽 테이블이 주인공이기 때문에 왼쪽 테이블에서 가져온 행의 값들은 빠짐없이 전부다 반환될 것이지만, 
오른쪽 테이블에서 가져오는 행의 값들은 존재하지 않으므로 NULL 값으로 반환됩니다. 그렇다면,
오른쪽 테이블에 있는 값이 왼쪽 테이블에는 존재하지 않는다면 두 테이블을 LEFT JOIN 한 결과는 어떠할까요?
결과 테이블에는 해당 값이 등장조차 하지 않을 것입니다. 왜냐, 주인공은 왼쪽 테이블이니까요.

#3 UNION
SQL UNION 연산자는 두 개 이상의 SELECT 문의 결과를 결합하여 하나의 결과 집합으로 나타내는 데 사용됩니다. 
이 연산자는 집합 간의 중복된 행을 제거하여 결과를 반환합니다. UNION 연산자는 SQL 질의의 유용한 기능 중 하나이며, 
데이터베이스에서 데이터를 분석하거나 리포팅할 때 특히 유용합니다.


데이터 조작 
<!- 행의 삽입 INSERT문 -->
인설트문은 행*데이터를 삽입한다. 

일반형식 
INSERT INTO 어떤 테이블에 삽입할 것인가 
VALUE 어떤 값을 삽입할 것인가

INSERT INTO 어떤 테이플에 삽입할 것인가
SELECT 어떤 데이블로부터 값을 삽입할 것인가

SHOW columns FROM employee; // 타입 혹은 데이블 정보확인

<!- DB 작성 -->
SHOW DATABASES -> 지금 가지고 있는 DB 보여주세요 

일반형식
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] DB 명

ALTER DATABASE --> 
문자코드에 맞춰 사용하고 싶을때 
요즘은 UTF8에 맞춰저 있기에 그닥 사용할 일은 없을듯 하다. 

<!- TABLE 작성 -->
RDB의 기본적인 요소로 데이터를 넣는 표 

일반형식
CREATE TABLE 테이블 명
열명1 데이터타입 [열제약] [열제약]
[, 열명2 데이터타입 [열제약] [열제약]]

일반형식
CREATE TABLE 테이블 명 AS SELECT 문 
모든 제약조건은 copy가 안됨. 데이터만 copy됨.

제약조건
1.NOT NULL * 데이터 확인 작업 중 주소 등 반드시 필요한 정보는 NULL이면 안되기 때문
2.유일성 * ID, mailaddress 고유정보 등 중복되는 것들이 있으면 안되기 떄문  
3.PRIMARY KEY * 동일 이름, 주소 등이 있을 때 구분을 주키로 할 수 있음 
4.검사 
5.외부키 * 열의 값이 다른 열의 값과 같아야 할 때 외부키로 연관 지을 수 있음 

테이블의 설계란 굉장히 중요한 작업 중 하나임. 
데이터 타입 등 제약조건, 관계성 등등을 고려해야 하기 때문에 신중하게 해야됨.
